// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  attendances   Attendance[]
  badges        UserBadge[]
  
  currentStreak Int       @default(0)
  maxStreak     Int       @default(0)
  totalDays     Int       @default(0)
  absences      Int       @default(0)
  settings      Json?     @default("{}")

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Attendance {
  id        String   @id @default(cuid())
  userId    String
  date      String   // formato: YYYY-MM-DD
  checkIn   DateTime   // formato: HH:mm:ss
  checkOut  String?  // formato: HH:mm:ss
  location  String   @default("Joviano De Aguiar")
  weather   String?
  isHoliday Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String
  icon        String
  type        BadgeType
  threshold   Int
  users       UserBadge[]

  @@index([type])
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  badge     Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

enum BadgeType {
  STREAK
  TOTAL_DAYS
  CONSISTENCY
  SPECIAL
}
